(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{187:function(a,e,t){"use strict";t.r(e);var i=t(0),r=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"碎碎念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#碎碎念","aria-hidden":"true"}},[a._v("#")]),a._v(" 碎碎念")]),a._v(" "),t("p",[a._v("大多人仅仅知道浏览器会对请求的静态文件进行缓存，但是为什么被缓存，缓存是怎样生效的，却并不是很清楚。")]),a._v(" "),t("p",[a._v("在此，我会尝试用简单明了的文字，把前端性能优化这一重要知识点补缺！")]),a._v(" "),t("h1",{attrs:{id:"http报文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http报文","aria-hidden":"true"}},[a._v("#")]),a._v(" http报文")]),a._v(" "),t("p",[a._v("HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。\n浏览器向服务器请求数据，发送请求(request)报文；服务器向浏览器返回数据，返回响应(response)报文。")]),a._v(" "),t("p",[a._v("报文信息主要分为两部分：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("包含属性的首部(header)：附加信息（cookie，缓存信息等）与缓存相关的规则信息，均包含在header中")])]),a._v(" "),t("li",[t("p",[a._v("包含数据的主体部分(body)：HTTP请求真正想要传输的部分")])])]),a._v(" "),t("h1",{attrs:{id:"缓存规则解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存规则解析","aria-hidden":"true"}},[a._v("#")]),a._v(" 缓存规则解析")]),a._v(" "),t("p",[a._v("为方便大家理解，我们认为浏览器存在一个缓存数据库,用于存储缓存信息。")]),a._v(" "),t("p",[a._v("在客户端第一次请求数据时，此时缓存数据库中没有对应的缓存数据，需要请求服务器，服务器返回后，将数据存储至缓存数据库中。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNbRwgy1fyawttw4h2j30kw0gy0v3.jpg",alt:"pic"}})]),a._v(" "),t("p",[a._v("HTTP缓存有多种规则，根据是否需要重新向服务器发起请求来分类，我将其分为两大类(强制缓存，对比缓存)\n在详细介绍这两种规则之前，先通过时序图的方式，让大家对这两种规则有个简单了解。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("已存在缓存数据时，仅基于"),t("strong",[a._v("强制缓存")]),a._v("，请求数据的流程如下")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws1.sinaimg.cn/large/006tNbRwgy1fyawwfaazsj31aa0i4jvu.jpg",alt:"pic"}})])]),a._v(" "),t("li",[t("p",[a._v("已存在缓存数据时，仅基于"),t("strong",[a._v("对比缓存")]),a._v("，请求数据的流程如下")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyawxoldomj31d40gw45a.jpg",alt:"pic"}})]),a._v(" "),t("p",[a._v("对缓存机制不太了解的同学可能会问，基于对比缓存的流程下，不管是否使用缓存，都需要向服务器发送请求，那么还用缓存干什么？\n这个问题，我们暂且放下，后文在详细介绍每种缓存规则的时候，会带给大家答案。")])])]),a._v(" "),t("h3",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("我们可以看到两类缓存规则的不同，强制缓存如果生效，不需要再和服务器发生交互，而对比缓存不管是否生效，都需要与服务端发生交互。\n两类缓存规则可以同时存在，"),t("strong",[a._v("强制缓存优先级高于对比缓存")]),a._v("，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。")]),a._v(" "),t("h1",{attrs:{id:"强制缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 强制缓存")]),a._v(" "),t("p",[a._v("从上文我们得知，强制缓存，在缓存数据未失效的情况下，可以直接使用缓存数据，那么浏览器是如何判断缓存数据是否失效呢？")]),a._v(" "),t("p",[a._v("我们知道，在没有缓存数据的时候，浏览器向服务器请求数据时，服务器会将数据和缓存规则一并返回，缓存规则信息包含在响应header中。")]),a._v(" "),t("p",[a._v("对于强制缓存来说，响应header中会有两个字段来标明失效规则")]),a._v(" "),t("ul",[t("li",[a._v("Expires")]),a._v(" "),t("li",[a._v("Cache-Control")])]),a._v(" "),t("p",[a._v("使用chrome的开发者工具，可以很明显的看到对于强制缓存生效时，网络请求的情况：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNbRwgy1fyax6q8gafj30w20bqwgy.jpg",alt:"pic"}})]),a._v(" "),t("p",[t("code",[a._v("from disk cache(磁盘缓存)")]),a._v("明确告诉我们答案，实际上还有一种"),t("code",[a._v("from memory cache(内存缓存)")]),a._v("。我们从官方文档可以看到二者区别：")]),a._v(" "),t("blockquote",[t("p",[a._v("Chrome employs two caches — an on-disk cache and a very fast in-memory cache. The lifetime of an in-memory cache is attached to the lifetime of a render process, which roughly corresponds to a tab. Requests that are answered from the in-memory cache are invisible to the web request API. If a request handler changes its behavior (for example, the behavior according to which requests are blocked), a simple page refresh might not respect this changed behavior. To make sure the behavior change goes through, call handlerBehaviorChanged() to flush the in-memory cache. But don't do it often; flushing the cache is a very expensive operation. You don't need to call handlerBehaviorChanged() after registering or unregistering an event listener.")])]),a._v(" "),t("p",[a._v("大概就是内存缓存是和渲染进程绑定的，大部分情况下于浏览器Tab对应。当然，内存缓存的速度会比磁盘缓存快很多。")]),a._v(" "),t("h3",{attrs:{id:"看个栗子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#看个栗子","aria-hidden":"true"}},[a._v("#")]),a._v(" 看个栗子")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyaycia3ryj30xg0hmak1.jpg",alt:"pic"}})]),a._v(" "),t("p",[a._v("图中Cache-Control仅指定了max-age，所以默认为private，缓存时间为31536000秒（365天）\n也就是说，在365天内再次请求这条数据，都会直接获取缓存数据库中的数据，直接使用。")]),a._v(" "),t("h3",{attrs:{id:"expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[a._v("#")]),a._v(" Expires")]),a._v(" "),t("p",[a._v("Expires的值为服务端返回的到期时间，是绝对时间。即下一次请求时，请求时间小于服务端返回的到期时间，代表未失效，命中强缓存，直接使用缓存数据。")]),a._v(" "),t("p",[a._v("不过Expires 是HTTP 1.0的东西，现在默认浏览器均默认使用HTTP 1.1，所以它的作用基本忽略。")]),a._v(" "),t("p",[a._v("另一个问题是，到期时间是由服务端生成的，但是客户端时间可能跟服务端时间有误差，这就会导致缓存命中的误差。\n所以HTTP 1.1 的版本，使用Cache-Control替代。")]),a._v(" "),t("h3",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[a._v("#")]),a._v(" Cache-Control")]),a._v(" "),t("p",[a._v("Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。")]),a._v(" "),t("ul",[t("li",[a._v("private:             客户端可以缓存")]),a._v(" "),t("li",[a._v("public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）")]),a._v(" "),t("li",[t("strong",[a._v("max-age=xxx")]),a._v(": 相对时间，缓存的内容将在 xxx 秒后失效")]),a._v(" "),t("li",[a._v("no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）")]),a._v(" "),t("li",[a._v("no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so...基本上和它说886）")])]),a._v(" "),t("p",[a._v("从图可以看出，cache-control的值是类似于max-age=31536000这样的，是一个相对时间，31536000是秒数，正好是一年的时间。当浏览器第一次请求资源的时候，会把response header的内容缓存下来。之后的请求会先从缓存检查该response header，通过第一次请求的date和cache-control计算出缓存有效时间。如果浏览器的时间没有超过这个缓存有效的时间，代表缓存还有效，命中强缓存，直接从缓存读取资源。")]),a._v(" "),t("p",[a._v("两者可以同时设置，但是优先级cache-control > expires。")]),a._v(" "),t("h3",{attrs:{id:"强制缓存作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 强制缓存作用")]),a._v(" "),t("p",[a._v("强缓存作为性能优化中缓存方面最有效的手段，能够极大的提升性能。由于强缓存不会向服务端发送请求，对服务端的压力也是大大减小。")]),a._v(" "),t("p",[a._v("对于不太经常变更的资源，可以设置一个超长时间的缓存时间，比如一年。浏览器在首次加载后，都会从缓存中读取。")]),a._v(" "),t("p",[a._v("但是由于不会向服务端发送请求，那么如果资源有更改的时候，怎么让浏览器知道呢？现在常用的解决方法是加一个?v=xxx的后缀，在更新静态资源版本的时候，更新这个v的值，这样相当于向服务端发起一个新的请求，从而达到更新静态资源的目的。")]),a._v(" "),t("h1",{attrs:{id:"对比缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对比缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 对比缓存")]),a._v(" "),t("p",[a._v("当强制缓存没有命中，对比缓存就该上场了。")]),a._v(" "),t("p",[a._v("对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。")]),a._v(" "),t("p",[a._v("浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。\n再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。")]),a._v(" "),t("p",[a._v("栗子")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("第一次访问")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyaxjd7pdnj30x805smy6.jpg",alt:"pic"}})])]),a._v(" "),t("li",[t("p",[a._v("第二次访问")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNbRwgy1fyaxjjcds6j30wo05u3zl.jpg",alt:"pic"}})])])]),a._v(" "),t("p",[a._v("通过两图的对比，我们可以很清楚的发现，在对比缓存命中时，状态码为304，并且报文大小和请求时间大大减少。")]),a._v(" "),t("p",[a._v("原因是，服务端在进行标识比较后，只返回header部分，通过状态码通知客户端使用缓存，不再需要将报文主体部分返回给客户端。")]),a._v(" "),t("h2",{attrs:{id:"缓存标识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存标识","aria-hidden":"true"}},[a._v("#")]),a._v(" 缓存标识")]),a._v(" "),t("p",[a._v("对于对比缓存来说，缓存标识的传递是我们着重需要理解的，它在请求header和响应header间进行传递，\n一共分为两种标识传递，接下来，我们分开介绍。")]),a._v(" "),t("h3",{attrs:{id:"last-modified-if-modified-since"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since","aria-hidden":"true"}},[a._v("#")]),a._v(" Last-Modified  /  If-Modified-Since")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Last-Modified")]),a._v(" "),t("p",[a._v("服务器在响应请求时，告诉浏览器资源的最后修改时间。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyaxmcdrvej30v80ayadd.jpg",alt:"pic"}})])]),a._v(" "),t("li",[t("p",[a._v("If-Modified-Since")]),a._v(" "),t("p",[a._v("再次请求服务器时，通过此字段通知服务器上次请求时，服务器返回的资源最后修改时间。格式为："),t("code",[a._v("if-modified-since:[保存的last-modified的值]")]),a._v("。服务器收到请求后发现有头If-Modified-Since 则与被请求资源对应的服务端最后修改时间进行比对，一致的话代表资源没有改变，服务端返回正文为空的响应，让浏览器中缓存中读取资源，这就大大减小了请求的消耗。")]),a._v(" "),t("ul",[t("li",[a._v("若资源的最后修改时间大于If-Modified-Since，说明资源又被改动过，则响应整片资源内容，返回状态码200；")]),a._v(" "),t("li",[a._v("若资源的最后修改时间小于或等于If-Modified-Since，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyaxptfc7mj30vi0b278j.jpg",alt:"pic"}})]),a._v(" "),t("h3",{attrs:{id:"last-modified的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified的弊端","aria-hidden":"true"}},[a._v("#")]),a._v(" Last-Modified的弊端")]),a._v(" "),t("p",[a._v("由于last-modified依赖的是保存的绝对时间，还是会出现误差的情况：一是保存的时间是以秒为单位的，1秒内多次修改是无法捕捉到的；二是各机器读取到的时间不一致，就有出现误差的可能性。为了改善这个问题，提出了使用etag。")])])]),a._v(" "),t("h3",{attrs:{id:"etag-if-none-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match","aria-hidden":"true"}},[a._v("#")]),a._v(" Etag  /  If-None-Match")]),a._v(" "),t("p",[a._v("etag是http协议提供的若干机制中的一种Web缓存验证机制，并且允许客户端进行缓存协商。生成etag常用的方法包括对资源内容使用抗碰撞散列函数，使用最近修改的时间戳的哈希值，甚至只是一个版本号。")]),a._v(" "),t("p",[a._v("注意，其优先级高于Last-Modified  /  If-Modified-Since）")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Etag")]),a._v(" "),t("p",[a._v("首次请求时，服务器会在响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）Etag。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws2.sinaimg.cn/large/006tNbRwgy1fyaxrcafk2j30vy0b60vy.jpg",alt:"pic"}})])]),a._v(" "),t("li",[t("p",[a._v("If-None-Match")]),a._v(" "),t("p",[a._v("再次请求服务器时，在request header中带上"),t("code",[a._v("if-none-match:[保存的etag的值]")]),a._v("。通过此字段通知服务器客户段缓存数据的唯一标识。服务器收到请求后发现有头If-None-Match 则与被请求资源的唯一标识进行比对，")]),a._v(" "),t("ul",[t("li",[a._v("不同，说明资源又被改动过，则响应整片资源内容，返回状态码200；")]),a._v(" "),t("li",[a._v("相同，说明资源无新修改，则响应HTTP 304，告知浏览器继续使用所保存的cache。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws1.sinaimg.cn/large/006tNbRwgy1fyaxsz3qy1j30vy0aogpl.jpg",alt:"pic"}})])])]),a._v(" "),t("h3",{attrs:{id:"协商缓存作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存作用","aria-hidden":"true"}},[a._v("#")]),a._v(" 协商缓存作用")]),a._v(" "),t("p",[a._v("协商缓存是无法减少请求数的开销的，但是可以减少返回的正文大小。一般来说，对于勤改动的html文件，使用协商缓存是一种不错的选择。")]),a._v(" "),t("h1",{attrs:{id:"刷新缓存方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#刷新缓存方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 刷新缓存方法")]),a._v(" "),t("p",[a._v("刷新强缓存可以使用?v=xxx的后缀。当然，人工更改版本号的成本比较高，而且难以维护，现在主流的是通过webpack等打包工具生成[name].[hash].js之类的文件名，也能刷新强缓存。")]),a._v(" "),t("p",[a._v("刷新协商缓存比较简单，修改文件内容即可。")]),a._v(" "),t("p",[a._v("对于浏览器而言，在Chrome中，你可以使用审查元素，高版本也叫检查，将Network中的Disable cache打勾，使用cmd+r刷新页面即可。当然你也可以使用强制刷新，直接在页面使用cmd+shift+r进行刷新。")]),a._v(" "),t("h1",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("浏览器发送请求前，根据请求头的expires和cache-control判断是否命中强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，执行比较缓存策略。")])]),a._v(" "),t("li",[t("p",[a._v("对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时即命中，浏览器直接使用缓存。")])]),a._v(" "),t("li",[t("p",[a._v("如果前两步都没有命中，则直接从服务端获取资源。")])])]),a._v(" "),t("p",[a._v("服务器首次发送请求")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws4.sinaimg.cn/large/006tNbRwgy1fyaxwdpintj30oe0lgmzs.jpg",alt:"pic"}})]),a._v(" "),t("p",[a._v("服务器再次发送请求")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://ws3.sinaimg.cn/large/006tNbRwgy1fyaxwjz2tjj30v20tgafr.jpg",alt:"pic"}})])])}],!1,null,null,null);r.options.__file="前端必须知道的HTTP缓存.md";e.default=r.exports}}]);